/*
 * AthenaX REST API
 * AthenaX REST API
 *
 * OpenAPI spec version: 0.1
 * Contact: haohui@uber.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.uber.athenax.backend.api.client;

import com.sun.jersey.api.client.GenericType;

import com.uber.athenax.backend.api.client.ApiException;
import com.uber.athenax.backend.api.client.ApiClient;
import com.uber.athenax.backend.api.client.Configuration;
import com.uber.athenax.backend.api.*;
import com.uber.athenax.backend.api.client.Pair;
import com.uber.athenax.backend.api.impl.JobsApiServiceImpl;
import com.uber.athenax.backend.api.ExtendedJobDefinition;
import com.uber.athenax.backend.api.InlineResponse200;
import com.uber.athenax.backend.api.JobDefinition;
import java.util.UUID;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-02-23T15:37:55.821Z")
public class JobsApi {
  private static final Logger LOG = LoggerFactory.getLogger(JobsApi.class);
  private ApiClient apiClient;

  public JobsApi() {
    this(Configuration.getDefaultApiClient());
  }

  public JobsApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Obtain a new UUID for a job
   * 
   * @return InlineResponse200
   * @throws ApiException if fails to make API call
   */
  public InlineResponse200 allocateNewJob() throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/jobs/new-jobs";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<InlineResponse200> localVarReturnType = new GenericType<InlineResponse200>() {};
    return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Get the detail information about a job
   * 
   * @param jobUUID UUID of the job (required)
   * @return JobDefinition
   * @throws ApiException if fails to make API call
   */
  public JobDefinition getJob(UUID jobUUID) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'jobUUID' is set
    if (jobUUID == null) {
      throw new ApiException(400, "Missing the required parameter 'jobUUID' when calling getJob");
    }
    
    // create path and map variables
    String localVarPath = "/jobs/{jobUUID}"
      .replaceAll("\\{" + "jobUUID" + "\\}", apiClient.escapeString(jobUUID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<JobDefinition> localVarReturnType = new GenericType<JobDefinition>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * List all jobs
   * 
   * @return List&lt;ExtendedJobDefinition&gt;
   * @throws ApiException if fails to make API call
   */
  public List<ExtendedJobDefinition> listJob() throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/jobs";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<List<ExtendedJobDefinition>> localVarReturnType = new GenericType<List<ExtendedJobDefinition>>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Remove a defintion of a job
   * 
   * @param jobUUID UUID of the job (required)
   * @throws ApiException if fails to make API call
   */
  public void removeJob(UUID jobUUID) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'jobUUID' is set
    if (jobUUID == null) {
      throw new ApiException(400, "Missing the required parameter 'jobUUID' when calling removeJob");
    }
    
    // create path and map variables
    String localVarPath = "/jobs/{jobUUID}"
      .replaceAll("\\{" + "jobUUID" + "\\}", apiClient.escapeString(jobUUID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };


    apiClient.invokeAPI(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, null);
  }
  /**
   * Update the definition of a job. The update might lead to starting / stopping jobs
   * 
   * @param jobUUID UUID of the job (required)
   * @param body The application to be run (required)
   * @throws ApiException if fails to make API call
   */
  public void updateJob(UUID jobUUID, JobDefinition body) throws ApiException {
	LOG.info("Update Job... START...");
    Object localVarPostBody = body;
    
    // verify the required parameter 'jobUUID' is set
    if (jobUUID == null) {
      throw new ApiException(400, "Missing the required parameter 'jobUUID' when calling updateJob");
    }
    
    // verify the required parameter 'body' is set
    if (body == null) {
      throw new ApiException(400, "Missing the required parameter 'body' when calling updateJob");
    }
    
    // create path and map variables
    String localVarPath = "/jobs/{jobUUID}"
      .replaceAll("\\{" + "jobUUID" + "\\}", apiClient.escapeString(jobUUID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    LOG.info("Update Job | localVarPath : {} | localVarQueryParams : {} | localVarPostBody : {} | localVarHeaderParams : {} | localVarFormParams :  {} | localVarAccept : {} | localVarContentType {} |... END...", localVarPath, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType);
    apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, null);
  }
}
